
<!-- saved from url=(0115)https://blackboard.le.ac.uk/bbcswebdav/pid-3288092-dt-content-rid-15472145_2/courses/CO3099_2021-22_SEM2/cw1/ms.htm -->
<html data-darkreader-mode="dynamic" data-darkreader-scheme="dark"><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252"><style class="darkreader darkreader--fallback" media="screen"></style><style class="darkreader darkreader--text" media="screen"></style><style class="darkreader darkreader--invert" media="screen">.jfk-bubble.gtx-bubble, .captcheck_answer_label > input + img, span#closed_text > img[src^="https://www.gstatic.com/images/branding/googlelogo"], span[data-href^="https://www.hcaptcha.com/"] > #icon, #bit-notification-bar-iframe, ::-webkit-calendar-picker-indicator {
    filter: invert(100%) hue-rotate(180deg) contrast(85%) !important;
}</style><style class="darkreader darkreader--inline" media="screen">[data-darkreader-inline-bgcolor] {
  background-color: var(--darkreader-inline-bgcolor) !important;
}
[data-darkreader-inline-bgimage] {
  background-image: var(--darkreader-inline-bgimage) !important;
}
[data-darkreader-inline-border] {
  border-color: var(--darkreader-inline-border) !important;
}
[data-darkreader-inline-border-bottom] {
  border-bottom-color: var(--darkreader-inline-border-bottom) !important;
}
[data-darkreader-inline-border-left] {
  border-left-color: var(--darkreader-inline-border-left) !important;
}
[data-darkreader-inline-border-right] {
  border-right-color: var(--darkreader-inline-border-right) !important;
}
[data-darkreader-inline-border-top] {
  border-top-color: var(--darkreader-inline-border-top) !important;
}
[data-darkreader-inline-boxshadow] {
  box-shadow: var(--darkreader-inline-boxshadow) !important;
}
[data-darkreader-inline-color] {
  color: var(--darkreader-inline-color) !important;
}
[data-darkreader-inline-fill] {
  fill: var(--darkreader-inline-fill) !important;
}
[data-darkreader-inline-stroke] {
  stroke: var(--darkreader-inline-stroke) !important;
}
[data-darkreader-inline-outline] {
  outline-color: var(--darkreader-inline-outline) !important;
}
[data-darkreader-inline-stopcolor] {
  stop-color: var(--darkreader-inline-stopcolor) !important;
}</style><style class="darkreader darkreader--variables" media="screen">:root {
   --darkreader-neutral-background: #181a1b;
   --darkreader-neutral-text: #d4d0cb;
   --darkreader-selection-background: #0650a8;
   --darkreader-selection-text: #e3e1de;
}</style><style class="darkreader darkreader--root-vars" media="screen"></style><style class="darkreader darkreader--user-agent" media="screen">html {
    background-color: #1d1f20 !important;
}
html {
    color-scheme: dark !important;
}
html, body, input, textarea, select, button {
    background-color: #1d1f20;
}
html, body, input, textarea, select, button {
    border-color: #746c60;
    color: #e3e1de;
}
a {
    color: #3790f9;
}
table {
    border-color: #565d60;
}
::placeholder {
    color: #afa99f;
}
input:-webkit-autofill,
textarea:-webkit-autofill,
select:-webkit-autofill {
    background-color: #575d06 !important;
    color: #e3e1de !important;
}
::-webkit-scrollbar {
    background-color: #252829;
    color: #a9a298;
}
::-webkit-scrollbar-thumb {
    background-color: #484d50;
}
::-webkit-scrollbar-thumb:hover {
    background-color: #596063;
}
::-webkit-scrollbar-thumb:active {
    background-color: #4b5053;
}
::-webkit-scrollbar-corner {
    background-color: #1d1f20;
}
::selection {
    background-color: #0650a8 !important;
    color: #e3e1de !important;
}
::-moz-selection {
    background-color: #0650a8 !important;
    color: #e3e1de !important;
}</style><meta name="darkreader" content="6907b8de18644883be11f2090cb94e7f"><style class="darkreader darkreader--override" media="screen">.vimvixen-hint {
    background-color: #7b5500 !important;
    border-color: #d3ad18 !important;
    color: #ede3c4 !important;
}
::placeholder {
    opacity: 0.5 !important;
}
a[href="https://coinmarketcap.com/"] > svg[width="94"][height="16"] > path {
    fill: var(--darkreader-neutral-text) !important;
}
#edge-translate-panel-body,
.MuiTypography-body1 {
    color: var(--darkreader-neutral-text) !important;
}
gr-main-header {
    background-color: #153e4b !important;
}</style></head>
<body data-new-gr-c-s-check-loaded="14.1050.0" data-gr-ext-installed="">
<h1>CO3099/7099 Programming Assignment Marking Criteria</h1>

<p>
Marks for this assignment are divided as follows:
</p>
<ul>
<li>Execution testing: 25 marks</li>
<li>Code inspection: 70 marks</li>
<li>Readability: 5 marks</li>
</ul>
<p>
The following is a more detailed description of each component.
They might need to be slightly adapted if "unexpected" situation happens.
</p>

<h2>Execution testing (25 marks)</h2>

<ul>
<li>
The purpose of this is to make sure you are able to write an actual working
program, and not dumping all the sample code (e.g. lab class solutions)
together in some meaningless way.
</li>
<li>
<b>
Your programs will only be tested on the departmental linux platform.
Please make sure your programs work there.</b>
</li>
<li>I am not your human debugger, and this is not meant to be a thorough
testing with unit test cases and code coverage and all that. It will only
check if your program <i>appears</i> to behave in the expected way.
</li>
<li>
There will be small penalties on things such as userid/filenames being hardcoded
(when the question says they shouldn't),
needing some fixed path ("C:\Users\abc123\Desktop\alice.prv" - I'm not abc123,
I don't have such a user account on my PC and furthermore we are using linux), wrong upper/lowercase filenames (please note that the linux 
filesystem is case-sensitive so alice.prv is not the same as Alice.prv),
hardcoded host and port so command-line arguments not used,
wrong command-line argument order, 
or otherwise not conforming to the assignment specifications. 
The marking is largely manual with the help of some automation scripts,
and all these problems make semi-automated marking more difficult or impossible.
</li>
</ul>

<p>
Marks are given according to some simple bands
based on how successful your programs run, such as: (these are just 
indications and are not exhaustive)
</p>
<ul>
<li>0 - Does not compile, or does not do anything meaningful</li>
<li>5 - Attempt to do at least part of what is required but never worked
(e.g. appears to send something but the other side never received)</li>
<li>10 - Neither encryption nor signature is handled correctly (e.g.
messages can be sent/received but both encryption and signature either did
not happen or are always wrong. This may be detected based on the screen 
outputs, or that everything still work when the wrong keys are supplied).
</li>
<li>15 - One of encryption/signature did not happen or is not
correct (similar ways of detection as above)</li>
<li>20 - Less serious or other non-crypto errors (e.g. required information
not printed; server quits/crashes after one client or after failed signature)
</li>
<li>25 - Always runs successfully</li>
</ul>

<p>
<b>An important element to be assessed is whether you know who should own 
which key. If your program crashes because it requires a key that it should 
not have, you will lose most or all the marks here. This is not a "small" 
mistake.</b>
</p>

<h2>Code inspection (70 marks)</h2>

<p>Again, each of these are marked in a banded way, based
on how complete/correct it is. It will only be concerned about whether you
are using the right API methods, feed them with the right data and use their
output. 
Marks are approximately distributed as follows.</p>
<ul>
<li>RSA en/decryption - 25</li>
<li>Base64 conversion - 10</li>
<li>Signature generation/verification - 25</li>
<li>Other client-server interaction - 10</li>
</ul>

For each item above, a percentage of the allocated mark is given according
to:
<ul>
<li>0% - There is nothing</li>
<li>20% - Some fragment of code attempting to use those API methods but not
correctly</li>
<li>40% - Correct ways of using the API methods in principle, but not adapted
to the question in hand, or with major errors, or very incomplete</li>
<li>60% - Completed "one half" (e.g. encryption without decryption; send without
receive; generating without verifying signatures) broadly
correctly; or like below but with more errors</li>
<li>80% - Used the API methods for the tasks broadly correctly but with some
small issues</li>
<li>100% - All correct</li>
</ul>

<!--; other (non-cryptographic programming bugs do not concern us here.-->
<p></p>


<h2>Readability (5 marks)</h2>

<ul>
<li>Quite frankly I'm only concerned with two things:
<ol>
<li> proper indentation;
</li><li> meaningful variable/method names.
</li></ol>
</li>
<li>I'm not really that concerned about object-orientedness and modularity,
factoring of common functions, etc.
Neither are other "nice" coding practice like catching exceptions
(except those that the assignment specifies you must handle).
</li>
<li>
Efficiency of your code (how quick it is) is not part of the marking criteria
(within reason). Similarly, "dumb" ways of doing things will generally not
be penalised.
</li>
<li>
Only write comments that are helpful. Most of the code are 
standard stuff, and if you are doing it the
right way, there is very little need for comments.
In any case, good code should be self-explanatory.
In particular, do not write comments that simply translate your code back
into English. For example, please do not write comments like this:
<pre>// first add 1 to the variable x
x++;

// then print the value of variable x
System.out.println(x);
</pre>
</li>
</ul>
<!--
And these are some real examples of your mis-indentation:
<pre>

</pre>
-->

So here is the marking criteria for readability:

<ul>
<li>5 - The marking of your code went so smoothly that the issue of readability
never came to my mind; or </li>
<li>5 - Your comments actually helped me understand some 
clever bits (not stupid bits) of your code that I otherwise would have great
difficulty understanding</li>
<li>4 - Your indentation/variable names are not misleading</li>
<li>3 - Could have misled someone, but not me</li>
<li>2 - Actually misled me and wasted a lot of my time</li>
<li>1 - You should enter the <a href="https://www.ioccc.org/">IOCCC</a> 
if this were C</li>
<li>0 - There is too little code, it is impossible to be unreadable; or</li>
<li>0 - You only pasted my code samples together; there is nothing actually 
written by you. I'm not going to award readability marks to my own code</li>
</ul>

<!--(No, that was half a joke... anyone whose indentation and variable names are 
not misleading should probably get at least 4.)-->



<div id="__vcbe" data-live="true"></div></body><grammarly-desktop-integration data-grammarly-shadow-root="true"></grammarly-desktop-integration></html>